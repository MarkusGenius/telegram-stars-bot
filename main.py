import asyncio
import hashlib
import logging
import os
from datetime import datetime
from aiogram import Bot, Dispatcher, types
from aiogram.contrib.fsm_storage.memory import MemoryStorage
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters.state import State, StatesGroup
from aiogram.utils import executor
from flask import Flask, request, jsonify
import threading
import requests
import re
from urllib.parse import urlencode

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
BOT_TOKEN = os.getenv("BOT_TOKEN", "YOUR_BOT_TOKEN_HERE")
ADMIN_ID = int(os.getenv("ADMIN_ID", "123456789"))

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏ Free-Kassa
MERCHANT_ID = os.getenv("MERCHANT_ID", "YOUR_MERCHANT_ID")
SECRET_WORD_1 = os.getenv("SECRET_WORD_1", "YOUR_SECRET_WORD_1")
SECRET_WORD_2 = os.getenv("SECRET_WORD_2", "YOUR_SECRET_WORD_2")

# –ö—É—Ä—Å –∑–≤–µ–∑–¥—ã –∫ —Ä—É–±–ª—é
STAR_TO_RUB_RATE = float(os.getenv("STAR_TO_RUB_RATE", "4.0"))

# –ü–æ—Ä—Ç –¥–ª—è Flask
PORT = int(os.getenv("PORT", 5000))

bot = Bot(token=BOT_TOKEN)
storage = MemoryStorage()
dp = Dispatcher(bot, storage=storage)

# Flask –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –¥–ª—è webhook
app = Flask(__name__)

# –°–æ—Å—Ç–æ—è–Ω–∏—è FSM
class OrderStates(StatesGroup):
    waiting_for_recipient = State()
    waiting_for_payment = State()

# –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –∑–∞–∫–∞–∑–æ–≤ (–≤ –ø—Ä–æ–¥–∞–∫—à–µ–Ω–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –Ω–∞—Å—Ç–æ—è—â—É—é –ë–î)
orders_db = {}
pending_payments = {}

def generate_payment_link(amount, order_id, user_id):
    """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —Å—Å—ã–ª–∫—É –¥–ª—è –æ–ø–ª–∞—Ç—ã —á–µ—Ä–µ–∑ Free-Kassa"""
    params = {
        'm': MERCHANT_ID,
        'oa': amount,
        'o': order_id,
        's': hashlib.md5(f"{MERCHANT_ID}:{amount}:{SECRET_WORD_1}:{order_id}".encode()).hexdigest(),
        'us_user_id': user_id
    }
    return f"https://pay.freekassa.ru/?{urlencode(params)}"

def verify_payment_signature(data):
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –ø–æ–¥–ø–∏—Å—å –ø–ª–∞—Ç–µ–∂–∞ –æ—Ç Free-Kassa"""
    try:
        merchant_id = data.get('MERCHANT_ID')
        amount = data.get('AMOUNT')
        merchant_order_id = data.get('MERCHANT_ORDER_ID')
        sign = data.get('SIGN')
        
        expected_sign = hashlib.md5(
            f"{merchant_id}:{amount}:{SECRET_WORD_2}:{merchant_order_id}".encode()
        ).hexdigest()
        
        return sign.upper() == expected_sign.upper()
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–¥–ø–∏—Å–∏: {e}")
        return False

def check_username_exists(username):
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ Telegram"""
    try:
        clean_username = username.replace('@', '')
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∞ username
        if re.match(r'^[a-zA-Z][a-zA-Z0-9_]{4,31}$', clean_username):
            return True
        return False
    except:
        return False

def calculate_cost(stars_count):
    """–†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ—Ç —Å—Ç–æ–∏–º–æ—Å—Ç—å –∑–≤–µ–∑–¥ –≤ —Ä—É–±–ª—è—Ö"""
    return int(stars_count * STAR_TO_RUB_RATE)

# Flask routes
@app.route('/webhook', methods=['POST'])
def webhook():
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –æ –ø–ª–∞—Ç–µ–∂–∞—Ö –æ—Ç Free-Kassa"""
    try:
        data = request.form.to_dict()
        logging.info(f"–ü–æ–ª—É—á–µ–Ω–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ: {data}")
        
        if not verify_payment_signature(data):
            logging.error("–ù–µ–≤–µ—Ä–Ω–∞—è –ø–æ–¥–ø–∏—Å—å –ø–ª–∞—Ç–µ–∂–∞")
            return "ERROR", 400
        
        order_id = data.get('MERCHANT_ORDER_ID')
        amount = float(data.get('AMOUNT', 0))
        user_id = int(data.get('us_user_id', 0))
        
        if order_id in orders_db:
            order = orders_db[order_id]
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É–º–º—É
            if amount >= order['cost']:
                order['status'] = 'paid'
                order['paid_at'] = datetime.now().isoformat()
                
                # –ó–∞–ø—É—Å–∫–∞–µ–º –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
                asyncio.run_coroutine_threadsafe(
                    notify_payment_success(user_id, order_id),
                    asyncio.get_event_loop()
                )
        
        return "YES"
    
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –≤ webhook: {e}")
        return "ERROR", 500

@app.route('/success.html')
def success_page():
    return '''
    <!DOCTYPE html>
    <html>
    <head>
        <meta charset="UTF-8">
        <meta http-equiv="refresh" content="3;url=https://t.me/{bot_username}?start=success">
        <title>–û–ø–ª–∞—Ç–∞ —É—Å–ø–µ—à–Ω–∞</title>
        <style>
            body { font-family: Arial; text-align: center; padding: 50px; }
            .success { color: green; font-size: 24px; }
        </style>
    </head>
    <body>
        <div class="success">‚úÖ –û–ø–ª–∞—Ç–∞ –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ!</div>
        <p>–ü–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –≤ –±–æ—Ç–∞ —á–µ—Ä–µ–∑ 3 —Å–µ–∫—É–Ω–¥—ã...</p>
        <a href="https://t.me/{bot_username}?start=success">–ü–µ—Ä–µ–π—Ç–∏ –≤ –±–æ—Ç–∞ —Å–µ–π—á–∞—Å</a>
    </body>
    </html>
    '''.replace('{bot_username}', 'YOUR_BOT_USERNAME')

@app.route('/failed.html')
def failed_page():
    return '''
    <!DOCTYPE html>
    <html>
    <head>
        <meta charset="UTF-8">
        <meta http-equiv="refresh" content="3;url=https://t.me/{bot_username}?start=failed">
        <title>–û—à–∏–±–∫–∞ –æ–ø–ª–∞—Ç—ã</title>
        <style>
            body { font-family: Arial; text-align: center; padding: 50px; }
            .error { color: red; font-size: 24px; }
        </style>
    </head>
    <body>
        <div class="error">‚ùå –û—à–∏–±–∫–∞ –æ–ø–ª–∞—Ç—ã</div>
        <p>–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É</p>
        <p>–ü–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –≤ –±–æ—Ç–∞ —á–µ—Ä–µ–∑ 3 —Å–µ–∫—É–Ω–¥—ã...</p>
        <a href="https://t.me/{bot_username}?start=failed">–ü–µ—Ä–µ–π—Ç–∏ –≤ –±–æ—Ç–∞ —Å–µ–π—á–∞—Å</a>
    </body>
    </html>
    '''.replace('{bot_username}', 'YOUR_BOT_USERNAME')

@app.route('/')
def index():
    return "Telegram Stars Bot is running!"

# Telegram bot handlers
async def notify_payment_success(user_id, order_id):
    """–£–≤–µ–¥–æ–º–ª—è–µ—Ç –æ —É—Å–ø–µ—à–Ω–æ–π –æ–ø–ª–∞—Ç–µ"""
    try:
        order = orders_db.get(order_id)
        if not order:
            return
        
        # –£–≤–µ–¥–æ–º–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        await bot.send_message(
            user_id,
            "‚úÖ –û–ø–ª–∞—Ç–∞ –ø—Ä–æ—à–ª–∞! –û–∂–∏–¥–∞–π—Ç–µ –≤ —Ç–µ—á–µ–Ω–∏–µ 5-10 –º–∏–Ω—É—Ç!\n"
            "–í–∞—à –∑–∞–∫–∞–∑ –ø–µ—Ä–µ–¥–∞–Ω –≤ –æ–±—Ä–∞–±–æ—Ç–∫—É."
        )
        
        # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è –∞–¥–º–∏–Ω–∞
        keyboard = types.InlineKeyboardMarkup()
        keyboard.add(types.InlineKeyboardButton(
            "‚úÖ –û–±—Ä–∞–±–æ—Ç–∞—Ç—å –∑–∞–∫–∞–∑", 
            callback_data=f"process_{order_id}"
        ))
        keyboard.add(types.InlineKeyboardButton(
            "‚ùå –û—Ç–º–µ–Ω–∏—Ç—å –∑–∞–∫–∞–∑", 
            callback_data=f"cancel_admin_{order_id}"
        ))
        
        # –£–≤–µ–¥–æ–º–ª—è–µ–º –∞–¥–º–∏–Ω–∞
        fragment_url = f"https://fragment.com/stars/buy?recipient={order['recipient']}&quantity={order['stars_count']}"
        
        await bot.send_message(
            ADMIN_ID,
            f"üîî –ù–æ–≤—ã–π –æ–ø–ª–∞—á–µ–Ω–Ω—ã–π –∑–∞–∫–∞–∑!\n\n"
            f"üìã ID –∑–∞–∫–∞–∑–∞: <code>{order_id}</code>\n"
            f"üë§ –ó–∞–∫–∞–∑—á–∏–∫: @{order['username']}\n"
            f"üéØ –ü–æ–ª—É—á–∞—Ç–µ–ª—å: @{order['recipient']}\n"
            f"‚≠ê –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–≤—ë–∑–¥: {order['stars_count']}\n"
            f"üí∞ –û–ø–ª–∞—á–µ–Ω–æ: {order['cost']} —Ä—É–±.\n"
            f"üìÖ –í—Ä–µ–º—è –æ–ø–ª–∞—Ç—ã: {order.get('paid_at', 'N/A')}\n\n"
            f"üîó –°—Å—ã–ª–∫–∞ –¥–ª—è –ø–æ–∫—É–ø–∫–∏ –Ω–∞ Fragment:\n"
            f"<code>{fragment_url}</code>\n\n"
            f"üëÜ –°–∫–æ–ø–∏—Ä—É–π—Ç–µ —Å—Å—ã–ª–∫—É, –ø–µ—Ä–µ–π–¥–∏—Ç–µ –Ω–∞ Fragment, –∫—É–ø–∏—Ç–µ –∑–≤—ë–∑–¥—ã –∏ –Ω–∞–∂–º–∏—Ç–µ '–û–±—Ä–∞–±–æ—Ç–∞—Ç—å –∑–∞–∫–∞–∑'",
            reply_markup=keyboard,
            parse_mode='HTML'
        )
        
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–∏ –æ–± –æ–ø–ª–∞—Ç–µ: {e}")

@dp.message_handler(commands=['start'])
async def start_handler(message: types.Message, state: FSMContext):
    args = message.get_args()
    
    if args == 'success':
        await message.answer("‚úÖ –û–ø–ª–∞—Ç–∞ –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ! –û–∂–∏–¥–∞–π—Ç–µ –æ–±—Ä–∞–±–æ—Ç–∫—É –∑–∞–∫–∞–∑–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º.")
        return
    elif args == 'failed':
        await message.answer("‚ùå –û–ø–ª–∞—Ç–∞ –Ω–µ –ø—Ä–æ—à–ª–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É.")
        return
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ username —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    if not message.from_user.username:
        await message.answer(
            "‚ùå –£ –≤–∞—Å –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç username –≤ Telegram!\n\n"
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –µ–≥–æ –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞:\n\n"
            "üì± <b>–ö–∞–∫ —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å username:</b>\n"
            "1Ô∏è‚É£ –û—Ç–∫—Ä–æ–π—Ç–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ Telegram\n" 
            "2Ô∏è‚É£ –ù–∞–∂–º–∏—Ç–µ –Ω–∞ —Å–≤–æ–µ –∏–º—è\n"
            "3Ô∏è‚É£ –í–≤–µ–¥–∏—Ç–µ username –≤ –ø–æ–ª–µ '–ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è'\n"
            "4Ô∏è‚É£ –í–µ—Ä–Ω–∏—Ç–µ—Å—å –≤ –±–æ—Ç–∞ –∏ –Ω–∞–∂–º–∏—Ç–µ /start",
            parse_mode='HTML'
        )
        return
    
    await state.finish()
    
    welcome_text = (
        "üåü <b>–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –Ω–∞—à–µ–≥–æ –±–æ—Ç–∞!</b>\n\n"
        "–ó–¥–µ—Å—å –≤—ã –º–æ–∂–µ—Ç–µ –ø—Ä–∏–æ–±—Ä–µ—Å—Ç–∏ –∑–≤—ë–∑–¥—ã –ø–æ —á–∏—Å—Ç–æ–º—É –∫—É—Ä—Å—É "
        "–∏–ª–∏ –ø–æ–¥–∞—Ä–∏—Ç—å –∏—Ö —Å–≤–æ–µ–º—É –¥—Ä—É–≥—É!\n\n"
        f"üí± <b>–¢–µ–∫—É—â–∏–π –∫—É—Ä—Å:</b> 1 –∑–≤–µ–∑–¥–∞ = {STAR_TO_RUB_RATE} —Ä—É–±.\n"
        f"‚ö° <b>–ö–æ–º–∏—Å—Å–∏—è:</b> 0% (—á–∏—Å—Ç—ã–π –∫—É—Ä—Å)\n"
        f"üöÄ <b>–°–∫–æ—Ä–æ—Å—Ç—å:</b> 5-10 –º–∏–Ω—É—Ç"
    )
    
    await message.answer(welcome_text, parse_mode='HTML')
    
    await OrderStates.waiting_for_recipient.set()
    await message.answer(
        "üìù <b>–ù–∞–ø–∏—à–∏—Ç–µ username –ø–æ–ª—É—á–∞—Ç–µ–ª—è –∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–≤—ë–∑–¥:</b>\n\n"
        "üî∏ –§–æ—Ä–º–∞—Ç: <code>@username –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ_–∑–≤—ë–∑–¥</code>\n"
        "üî∏ –ü—Ä–∏–º–µ—Ä: <code>@durov 50</code>\n\n"
        "‚ö†Ô∏è Username –¥–æ–ª–∂–µ–Ω —Å—É—â–µ—Å—Ç–≤–æ–≤–∞—Ç—å –≤ Telegram!",
        parse_mode='HTML'
    )

@dp.message_handler(state=OrderStates.waiting_for_recipient)
async def process_recipient(message: types.Message, state: FSMContext):
    try:
        # –ü–∞—Ä—Å–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ
        parts = message.text.strip().split()
        if len(parts) != 2:
            await message.answer(
                "‚ùå <b>–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç!</b>\n\n"
                "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: <code>@username –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ_–∑–≤—ë–∑–¥</code>\n"
                "–ü—Ä–∏–º–µ—Ä: <code>@durov 50</code>",
                parse_mode='HTML'
            )
            return
        
        recipient_username = parts[0].replace('@', '')
        stars_count = int(parts[1])
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∏
        if stars_count <= 0:
            await message.answer("‚ùå –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–≤—ë–∑–¥ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –±–æ–ª—å—à–µ 0!")
            return
            
        if stars_count > 10000:
            await message.answer("‚ùå –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–≤—ë–∑–¥ –∑–∞ —Ä–∞–∑: 10,000")
            return
            
        if not check_username_exists(recipient_username):
            await message.answer(
                "‚ùå <b>–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π username!</b>\n\n"
                "–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å –Ω–∞–ø–∏—Å–∞–Ω–∏—è.\n"
                "Username –¥–æ–ª–∂–µ–Ω:\n"
                "‚Ä¢ –ù–∞—á–∏–Ω–∞—Ç—å—Å—è —Å –±—É–∫–≤—ã\n"
                "‚Ä¢ –°–æ–¥–µ—Ä–∂–∞—Ç—å 5-32 —Å–∏–º–≤–æ–ª–∞\n"
                "‚Ä¢ –°–æ—Å—Ç–æ—è—Ç—å –∏–∑ –±—É–∫–≤, —Ü–∏—Ñ—Ä –∏ –ø–æ–¥—á–µ—Ä–∫–∏–≤–∞–Ω–∏–π",
                parse_mode='HTML'
            )
            return
        
        # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º —Å—Ç–æ–∏–º–æ—Å—Ç—å
        cost = calculate_cost(stars_count)
        
        # –°–æ–∑–¥–∞–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–π ID –∑–∞–∫–∞–∑–∞
        order_id = f"order_{message.from_user.id}_{int(datetime.now().timestamp())}"
        
        order_data = {
            'user_id': message.from_user.id,
            'username': message.from_user.username,
            'recipient': recipient_username,
            'stars_count': stars_count,
            'cost': cost,
            'order_id': order_id,
            'status': 'pending',
            'created_at': datetime.now().isoformat()
        }
        
        orders_db[order_id] = order_data
        pending_payments[message.from_user.id] = order_data
        
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Å—Å—ã–ª–∫—É –¥–ª—è –æ–ø–ª–∞—Ç—ã
        payment_link = generate_payment_link(cost, order_id, message.from_user.id)
        
        keyboard = types.InlineKeyboardMarkup()
        keyboard.add(types.InlineKeyboardButton("üí≥ –û–ø–ª–∞—Ç–∏—Ç—å", url=payment_link))
        keyboard.add(types.InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∏—Ç—å", callback_data=f"cancel_{order_id}"))
        
        order_text = (
            f"‚úÖ <b>–ó–∞–∫–∞–∑ —Å–æ–∑–¥–∞–Ω!</b>\n\n"
            f"üìã <b>–î–µ—Ç–∞–ª–∏ –∑–∞–∫–∞–∑–∞:</b>\n"
            f"üÜî ID: <code>{order_id}</code>\n"
            f"üë§ –ü–æ–ª—É—á–∞—Ç–µ–ª—å: @{recipient_username}\n"
            f"‚≠ê –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–≤—ë–∑–¥: {stars_count:,}\n"
            f"üí∞ –ö –æ–ø–ª–∞—Ç–µ: <b>{cost} —Ä—É–±–ª–µ–π</b>\n\n"
            f"üí≥ –ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ –¥–ª—è –æ–ø–ª–∞—Ç—ã:\n"
            f"üî∏ –ü—Ä–∏–Ω–∏–º–∞–µ–º –≤—Å–µ –±–∞–Ω–∫–æ–≤—Å–∫–∏–µ –∫–∞—Ä—Ç—ã\n"
            f"üî∏ –°–ë–ü (–°–∏—Å—Ç–µ–º–∞ –±—ã—Å—Ç—Ä—ã—Ö –ø–ª–∞—Ç–µ–∂–µ–π)\n"
            f"üî∏ –≠–ª–µ–∫—Ç—Ä–æ–Ω–Ω—ã–µ –∫–æ—à–µ–ª—å–∫–∏"
        )
        
        await message.answer(order_text, reply_markup=keyboard, parse_mode='HTML')
        await OrderStates.waiting_for_payment.set()
        
    except ValueError:
        await message.answer("‚ùå –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–≤—ë–∑–¥ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å —Ü–µ–ª—ã–º —á–∏—Å–ª–æ–º!")
    except Exception as e:
        await message.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–∫–∞–∑–∞: {e}")

@dp.callback_query_handler(lambda c: c.data.startswith('cancel_'))
async def cancel_order(callback_query: types.CallbackQuery, state: FSMContext):
    order_id = callback_query.data.replace('cancel_', '')
    
    if order_id in orders_db:
        del orders_db[order_id]
    
    if callback_query.from_user.id in pending_payments:
        del pending_payments[callback_query.from_user.id]
    
    await state.finish()
    await callback_query.message.edit_text("‚ùå –ó–∞–∫–∞–∑ –æ—Ç–º–µ–Ω–µ–Ω. –î–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –Ω–æ–≤–æ–≥–æ –∑–∞–∫–∞–∑–∞ –Ω–∞–∂–º–∏—Ç–µ /start")
    await callback_query.answer("–ó–∞–∫–∞–∑ –æ—Ç–º–µ–Ω–µ–Ω")

@dp.callback_query_handler(lambda c: c.data.startswith('process_'))
async def process_order(callback_query: types.CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–∫–∞–∑–∞ –∞–¥–º–∏–Ω–æ–º –ø–æ—Å–ª–µ –ø–æ–∫—É–ø–∫–∏ –Ω–∞ Fragment"""
    if callback_query.from_user.id != ADMIN_ID:
        await callback_query.answer("‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω", show_alert=True)
        return
    
    order_id = callback_query.data.replace('process_', '')
    
    if order_id not in orders_db:
        await callback_query.answer("‚ùå –ó–∞–∫–∞–∑ –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
        return
    
    order = orders_db[order_id]
    order['status'] = 'completed'
    order['completed_at'] = datetime.now().isoformat()
    
    # –£–≤–µ–¥–æ–º–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏
    try:
        success_text = (
            f"üéâ <b>–°–ø–∞—Å–∏–±–æ –∑–∞ –ø–æ–∫—É–ø–∫—É!</b>\n\n"
            f"‚≠ê <b>{order['stars_count']:,} –∑–≤—ë–∑–¥</b> —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã "
            f"–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é @{order['recipient']}!\n\n"
            f"‚ú® –ó–≤—ë–∑–¥—ã —É–∂–µ –¥–æ—Å—Ç—É–ø–Ω—ã –ø–æ–ª—É—á–∞—Ç–µ–ª—é\n"
            f"üïí –í—Ä–µ–º—è –æ–±—Ä–∞–±–æ—Ç–∫–∏: {datetime.now().strftime('%H:%M')}\n\n"
            f"üåü <b>–ë—É–¥–µ–º –∂–¥–∞—Ç—å –≤–∞—Å —Å–Ω–æ–≤–∞!</b>"
        )
        
        await bot.send_message(order['user_id'], success_text, parse_mode='HTML')
        
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {e}")
    
    # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∞
    completion_text = (
        f"‚úÖ <b>–ó–∞–∫–∞–∑ {order_id} –æ–±—Ä–∞–±–æ—Ç–∞–Ω!</b>\n\n"
        f"üë§ –ó–∞–∫–∞–∑—á–∏–∫ —É–≤–µ–¥–æ–º–ª–µ–Ω –æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏\n"
        f"‚è∞ –í—Ä–µ–º—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è: {datetime.now().strftime('%d.%m.%Y %H:%M')}"
    )
    
    await callback_query.message.edit_text(completion_text, parse_mode='HTML')
    await callback_query.answer("‚úÖ –ó–∞–∫–∞–∑ —É—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω!")

@dp.callback_query_handler(lambda c: c.data.startswith('cancel_admin_'))
async def cancel_order_admin(callback_query: types.CallbackQuery):
    """–û—Ç–º–µ–Ω–∞ –∑–∞–∫–∞–∑–∞ –∞–¥–º–∏–Ω–æ–º"""
    if callback_query.from_user.id != ADMIN_ID:
        await callback_query.answer("‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω", show_alert=True)
        return
    
    order_id = callback_query.data.replace('cancel_admin_', '')
    
    if order_id not in orders_db:
        await callback_query.answer("‚ùå –ó–∞–∫–∞–∑ –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
        return
    
    order = orders_db[order_id]
    
    # –£–≤–µ–¥–æ–º–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –æ–± –æ—Ç–º–µ–Ω–µ
    try:
        await bot.send_message(
            order['user_id'],
            f"üòî –ò–∑–≤–∏–Ω–∏—Ç–µ, –∑–∞–∫–∞–∑ #{order_id} –±—ã–ª –æ—Ç–º–µ–Ω–µ–Ω –ø–æ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–º –ø—Ä–∏—á–∏–Ω–∞–º.\n\n"
            f"üí∞ –°—Ä–µ–¥—Å—Ç–≤–∞ –±—É–¥—É—Ç –≤–æ–∑–≤—Ä–∞—â–µ–Ω—ã –≤ —Ç–µ—á–µ–Ω–∏–µ 1-3 —Ä–∞–±–æ—á–∏—Ö –¥–Ω–µ–π.\n"
            f"üìû –ü–æ –≤–æ–ø—Ä–æ—Å–∞–º –æ–±—Ä–∞—â–∞–π—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É: @support"
        )
    except:
        pass
    
    # –£–¥–∞–ª—è–µ–º –∑–∞–∫–∞–∑
    del orders_db[order_id]
    
    await callback_query.message.edit_text(f"‚ùå –ó–∞–∫–∞–∑ {order_id} –æ—Ç–º–µ–Ω–µ–Ω –∞–¥–º–∏–Ω–æ–º")
    await callback_query.answer("–ó–∞–∫–∞–∑ –æ—Ç–º–µ–Ω–µ–Ω")

@dp.message_handler(commands=['orders'])
async def show_orders(message: types.Message):
    """–ü–æ–∫–∞–∑–∞—Ç—å –∞–∫—Ç–∏–≤–Ω—ã–µ –∑–∞–∫–∞–∑—ã (—Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∞)"""
    if message.from_user.id != ADMIN_ID:
        return
    
    if not orders_db:
        await message.answer("üì≠ –ê–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–∫–∞–∑–æ–≤ –Ω–µ—Ç")
        return
    
    orders_text = "üìã <b>–ê–∫—Ç–∏–≤–Ω—ã–µ –∑–∞–∫–∞–∑—ã:</b>\n\n"
    
    for order_id, order in orders_db.items():
        status_emoji = {
            'pending': '‚è≥',
            'paid': 'üí∞', 
            'completed': '‚úÖ'
        }.get(order['status'], '‚ùì')
        
        orders_text += (
            f"{status_emoji} <code>{order_id}</code>\n"
            f"üë§ @{order['username']} ‚Üí @{order['recipient']}\n"
            f"‚≠ê {order['stars_count']:,} –∑–≤—ë–∑–¥ | üí∞ {order['cost']} —Ä—É–±.\n"
            f"üìÖ {order.get('created_at', 'N/A')[:16]}\n\n"
        )
    
    await message.answer(orders_text, parse_mode='HTML')

@dp.message_handler(commands=['stats'])
async def show_stats(message: types.Message):
    """–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ (—Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∞)"""
    if message.from_user.id != ADMIN_ID:
        return
    
    total_orders = len(orders_db)
    paid_orders = len([o for o in orders_db.values() if o['status'] in ['paid', 'completed']])
    completed_orders = len([o for o in orders_db.values() if o['status'] == 'completed'])
    total_revenue = sum([o['cost'] for o in orders_db.values() if o['status'] in ['paid', 'completed']])
    
    stats_text = (
        f"üìä <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±–æ—Ç–∞:</b>\n\n"
        f"üìã –í—Å–µ–≥–æ –∑–∞–∫–∞–∑–æ–≤: {total_orders}\n"
        f"üí∞ –û–ø–ª–∞—á–µ–Ω–Ω—ã—Ö: {paid_orders}\n"
        f"‚úÖ –í—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã—Ö: {completed_orders}\n"
        f"üíµ –û–±—â–∞—è –≤—ã—Ä—É—á–∫–∞: {total_revenue} —Ä—É–±.\n\n"
        f"üíé –¢–µ–∫—É—â–∏–π –∫—É—Ä—Å: {STAR_TO_RUB_RATE} —Ä—É–±./–∑–≤–µ–∑–¥–∞"
    )
    
    await message.answer(stats_text, parse_mode='HTML')

@dp.message_handler()
async def handle_other_messages(message: types.Message):
    await message.answer(
        "üëã –ü—Ä–∏–≤–µ—Ç! –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /start –¥–ª—è –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç—ã —Å –±–æ—Ç–æ–º.\n\n"
        "üåü –ó–¥–µ—Å—å –≤—ã –º–æ–∂–µ—Ç–µ –∫—É–ø–∏—Ç—å Telegram Stars –ø–æ –ª—É—á—à–µ–º—É –∫—É—Ä—Å—É!"
    )

def run_flask():
    """–ó–∞–ø—É—Å–∫ Flask –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ"""
    app.run(host='0.0.0.0', port=PORT, debug=False)

if __name__ == '__main__':
    logging.basicConfig(
        level=logging.INFO,
        format='%(asctime)s - %(name)s - %(levelname)s - %(message)s'
    )
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º Flask –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ
    flask_thread = threading.Thread(target=run_flask, daemon=True)
    flask_thread.start()
    
    logging.info("üöÄ Telegram Stars Bot –∑–∞–ø—É—â–µ–Ω!")
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º Telegram –±–æ—Ç–∞
    executor.start_polling(dp, skip_updates=True)
